{"version":3,"sources":["App.module.scss","components/Timer/Timer.module.scss","components/Options/Options.module.scss","redux/app-reducer.ts","Core/Core.ts","redux/timer-reducer.ts","redux/redux-reducers.ts","components/Start/Start.tsx","components/Options/Options.tsx","components/Cell/Cell.tsx","components/TimerTable/TimerTable.tsx","components/Timer/Timer.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["module","exports","SET_GRID","SET_MOVEMENT","SET_START","SET_PRESET_ARR","SET_START_GAME","SET_SUCCESS","initialState","arr","movement","h","v","start","presetArr","startGame","success","setMovement","type","payload","appReducer","state","action","possibleMove","multiplicity","Math","sqrt","length","i","push","includes","splice","column","indexOf","j","swap","index1","index2","map","val","idx","MoveAside","from","displace","couple","swappedArr","swappedDisplace","swapFrom","swapTo","randomizedGrid","preset","gridSet","Set","rowLength","Number","zeroRow","nextRow","size","add","getRandomInt","arrSet","isSolved","index","set","reduce","accumulator","currentValue","array","result","max","floor","random","sortBy","sorting","sorted","undefined","sort","a","b","SET_TIMER","CHANGE_SORT","SET_RESULT_TIME","timer","min","sec","direction","resultTime","timerReducer","slice","reverse","el","join","RootReducer","combineReducers","game15","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","StyledButton","styled","button","props","Start","setGrid","setStart","setIsDone","setPresetArr","useState","disabled","setDisabled","useEffect","onClick","Options","setCounter","setOptions","onSubmit","grid","render","handleSubmit","form","submitting","pristine","values","className","styles","options","name","component","value","StyledCell","StyledEmpty","div","Cell","children","setSize","newSize","TableRows","Table","Body","Row","TimerTableContainer","connect","dispatch","useDispatch","lengthArr","setLengthArr","sortable","celled","fixed","Header","HeaderCell","TimerContainer","setTimer","setResultTime","time","setTime","gameTimer","setTimeout","clearTimeout","timerWrap","AppContainer","withRouter","setStartGame","setPreset","showGrid","setShowGrid","showTimerDown","setShowTimerDown","counter","checkedArr","arrDone","shift","every","isDone","handleClick","e","currentTarget","innerHTML","app","header","wrapper","game","cell","optionsWrap","timerTable","GameOf15App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,OAAS,oBAAoB,QAAU,qBAAqB,QAAU,qBAAqB,KAAO,kBAAkB,QAAU,qBAAqB,YAAc,2B,mBCA1MD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,sB,mBCA9DD,EAAOC,QAAU,CAAC,QAAU,2B,oMCDtBC,EAAW,WACXC,EAAe,eACfC,EAAY,YACZC,EAAiB,iBACjBC,EAAiB,iBACjBC,EAAc,cAcfC,EAA6B,CAC7BC,IAAK,GACLC,SAAU,CACNC,EAAG,GACHC,EAAG,IAEPC,MAAO,WACPC,UAAW,GACXC,WAAW,EACXC,SAAS,GA+CGC,EAAc,SAACP,GAAD,MACvB,CAACQ,KAAMf,EAAcgB,QAAS,CAACT,cAoBpBU,EA9DI,WAA8D,IAA7DC,EAA4D,uDAApDb,EAAcc,EAAsC,uCAC5E,OAAOA,EAAOJ,MACV,KAAKhB,EAKL,KAAKC,EAKL,KAAKC,EACD,OAAO,2BACAiB,GACAC,EAAOH,SAElB,KAAKd,EACD,OAAO,2BACAgB,GADP,IAEIP,UAAU,GAAD,mBAAMO,EAAMP,WAAZ,YAA0BQ,EAAOH,QAAQL,cAE1D,KAAKR,EAKL,KAAKC,EACD,OAAO,2BACAc,GACAC,EAAOH,SAElB,QACI,OAAOE,I,QC7DVE,EAAe,SAACd,EAAoBQ,GAI/C,IAHA,IAAMO,EAAeC,KAAKC,KAAKjB,EAAIkB,QAC/BA,EAASH,EACTZ,EAAmB,GAAID,EAAmB,GACrCiB,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAE/B,GADAjB,EAAEkB,KAAKpB,EAAImB,IACPjB,EAAEmB,SAAS,IAAMnB,EAAEgB,OAASH,IAAiB,EAAG,CAC9Cb,EAAEgB,OAASH,GAAcb,EAAEoB,OAAO,EAAGpB,EAAEgB,OAASH,GACpD,MACSb,EAAEgB,OAASH,IAAiB,IACrCG,GAAUH,GAId,IADA,IAAIQ,EAASvB,EAAIwB,QAAQ,GAClBD,EAASR,EAAe,GAC7BQ,GAAUR,EAEZ,IAAK,IAAIU,EAAIF,EAAQE,EAAIzB,EAAIkB,QAC3Bf,EAAEiB,KAAKpB,EAAIyB,IACXA,GAAKV,EAEPP,EAAY,CAAEN,IAAGC,OAGbuB,EAAO,SAAC1B,EAAoB2B,EAAgBC,GAArC,OAAuE5B,EAAI6B,KAAI,SAACC,EAAKC,EAAK/B,GACrG,OAAI+B,IAAQJ,EAAe3B,EAAI4B,GAC3BG,IAAQH,EAAe5B,EAAI2B,GACxBG,MAGIE,EAAY,SAAChC,EAAoBiC,EAAcC,GAC1D,IAAIC,EAAwB,GACxBC,EAAapC,EACbqC,EAAe,YAAOH,GAE1B,GAAIG,EAAgBb,QAAQS,GAAQI,EAAgBb,QAAQ,GAC1D,IAAK,IAAIL,EAAIe,EAAShB,OAAS,EAAGC,GAAK,EAAGA,IAAK,CAE7C,GAAkB,KADlBgB,EAAS,CAACE,EAAgBlB,GAAIkB,EAAgBlB,EAAI,KACvC,GAAU,CACnB,IAAImB,EAAWF,EAAWZ,QAAQW,EAAO,IACrCI,EAASH,EAAWZ,QAAQW,EAAO,IACvCC,EAAaV,EAAKU,EAAYE,EAAUC,GACxCF,EAAe,YAAOX,EAAKW,EAAiBA,EAAgBb,QAAQW,EAAO,IAAKE,EAAgBb,QAAQW,EAAO,MAC/GrB,EAAasB,EAAY5B,GAE3B,GAAI2B,EAAO,KAAOF,EAAM,WAG1B,IAAK,IAAId,EAAI,EAAGA,EAAIe,EAAShB,OAAQC,IAAK,CAExC,GAAkB,KADlBgB,EAAS,CAACE,EAAgBlB,GAAIkB,EAAgBlB,EAAI,KACvC,GAAU,CACnB,IAAImB,EAAWF,EAAWZ,QAAQW,EAAO,IACrCI,EAASH,EAAWZ,QAAQW,EAAO,IACvCC,EAAaV,EAAKU,EAAYE,EAAUC,GACxCF,EAAe,YAAOX,EAAKW,EAAiBA,EAAgBb,QAAQW,EAAO,IAAKE,EAAgBb,QAAQW,EAAO,MAC/GrB,EAAasB,EAAY5B,GAE3B,GAAI2B,EAAO,KAAOF,EAAM,MAI5B,OAAOG,GAGII,EAAiB,SAACC,GAM7B,IALA,IAAMC,EAAuB,IAAIC,IAC7BC,EAAY5B,KAAKC,KAAK4B,OAAOJ,IAC7BK,EAAU,EACRC,EAAUH,EAETF,EAAQM,KAAOH,OAAOJ,IAC3BC,EAAQO,IAAIC,EAAaL,OAAOJ,KAElC,IAAIU,EAAqB,YAAOT,GAEhC,GAAIK,EAAU,IAAM,EAClB,KAAOI,EAAO3B,QAAQ,IAAMoB,GAC1BA,GAAaG,EACbD,GAAW,OAGbA,EAAU,EAGZ,IAAKM,EAASD,GAAUL,GAAW,IAAM,EAAG,CAE1C,IADA,IAAIO,EAAgB,EAAGzB,EAAiB,EAC/BT,EAAI,EAAGA,EAAIgC,EAAOjC,OAAQC,IAC7BgC,EAAOhC,GAAKgC,EAAOhC,EAAI,IAAoB,IAAdgC,EAAOhC,IAA8B,IAAlBgC,EAAOhC,EAAI,KAC7DkC,EAAQlC,EACRS,EAAST,EAAI,GAGjBgC,EAASzB,EAAKyB,EAAQE,EAAOzB,GAE/B,OAAOuB,GAGHC,EAAW,SAACE,GAQhB,OAPaA,EAAIC,QAAO,SAACC,EAAaC,EAAcJ,EAAOK,GAEzD,IADA,IAAIC,EAAS,EACDN,EAAQK,EAAMxC,OAAQmC,IAC5BI,EAAeC,EAAML,EAAQ,IAA2B,IAArBK,EAAML,EAAQ,IAA6B,IAAjBI,IAAoBE,GAAU,GAEjG,OAAOH,EAAeG,IACrB,IAICT,EAAe,SAACU,GACpB,OAAO5C,KAAK6C,MAAM7C,KAAK8C,SAAWF,IAGvBG,EAAS,SAAC/D,EAAoBgE,GACzC,IAAIC,EAAM,YAAOjE,GACjB,YAAgBkE,IAAZF,GACFC,EAAOE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACnBJ,GAEFA,GC1HHK,EAAY,YACZC,EAAc,cACdC,EAAkB,kBASpBzE,EAA6B,CAC7B0E,MAAO,CACHvE,EAAG,EACHwE,IAAK,EACLC,IAAK,GAETpD,OAAQ,GACRqD,eAAWV,EACXW,WAAY,IAuDDC,EAlDM,WAA8D,IAA7DlE,EAA4D,uDAApDb,EAAcc,EAAsC,uCAC9E,OAAQA,EAAOJ,MACX,KAAK6D,EACD,OAAO,2BACA1D,GACDC,EAAOH,SAGjB,KAAK8D,EACD,OAAO,2BACA5D,GADP,IAEIiE,WAAW,GAAD,mBAAMjE,EAAMiE,YAAe,CAAChE,EAAOH,QAAQmE,eAE7D,KAAKN,EAED,OAAI3D,EAAMW,SAAWV,EAAOH,QACjB,2BACAE,GADP,IAEIiE,WAAYjE,EAAMiE,WAAWE,QAAQC,UACrCJ,UACwB,cAApBhE,EAAMgE,UAA4B,aAAe,cAIrD,2BACAhE,GADP,IAEGW,OAAQV,EAAOH,QACfmE,WAAY,CAACd,EAAOnD,EAAMiE,WAAWhD,KAAI,SAAAoD,GAAE,OAAIpC,OAAOoC,EAAGC,aACzDN,UAAW,cAGnB,QACI,OAAOhE,ICrDfuE,EAAcC,YAAgB,CAC9BC,OAAQ1E,EACR8D,MAAOK,IAOLQ,EAAmBC,OAAOC,sCAAwCC,IAClEC,EAAQC,YAAYR,EAAaG,EAAiBM,YAAgBC,OAExEN,OAAOG,MAAQA,EAEAA,I,MAAAA,I,uBCVTI,EAAeC,IAAOC,OAAV,iOAKI,SAAAC,GAAK,MAAoB,UAAhBA,EAAM7F,MAAoB,MAAwB,YAAhB6F,EAAM7F,MAAsB,QAAU,UAkDxF8F,EAjCqC,SAAC,GAAiF,IAAhFC,EAA+E,EAA/EA,QAAS/F,EAAsE,EAAtEA,MAAOqC,EAA+D,EAA/DA,OAAQ2D,EAAuD,EAAvDA,SAAU5D,EAA6C,EAA7CA,eAAgB6D,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,aAE/G,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAIAC,qBAAU,WACCD,GAAThE,KAGC,CAAC+D,EAAU/D,IAed,OACG,cAACqD,EAAD,CAAcU,SAAUA,EAAUG,QAdnB,WACL,UAAVvG,GAAkBgG,EAAS,WACjB,YAAVhG,IACDgG,EAAS,SACTC,GAAU,GACR5D,IACD0D,EAAQ3D,EAAeC,IACvB6D,EAAa,CAAC7D,OAO0CrC,MAAOA,EAA/D,SACCA,K,yBCuBOwG,EAjEwC,SAAC,GAAuG,IAAtGN,EAAqG,EAArGA,aAAcO,EAAuF,EAAvFA,WAAYT,EAA2E,EAA3EA,SAAUU,EAAiE,EAAjEA,WAAYtE,EAAqD,EAArDA,eAAgB2D,EAAqC,EAArCA,QAASE,EAA4B,EAA5BA,UAW9H,OACI,cAAC,IAAD,CACAU,SAXa,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KACjBF,GAAW,GACRE,GAAKZ,EAAS,SACjBD,EAAQ3D,EAAewE,IACvBX,GAAU,GACVC,EAAa,CAACU,IACdH,EAAW,IAMTI,OAAQ,YAA2D,IAAxDC,EAAuD,EAAvDA,aAAuD,EAAzCC,KAAyC,EAAnCC,WAAmC,EAAvBC,SAAuB,EAAbC,OACjD,OAAO,uBAAOC,UAAWC,IAAOC,QAASV,SAAUG,EAA5C,UACC,8BACP,sDAED,gCACA,kCACI,cAAC,IAAD,CACEQ,KAAK,OACLC,UAAU,QACVlH,KAAK,QACLmH,MAAM,MACL,IANP,SASE,kCACE,cAAC,IAAD,CACEF,KAAK,OACLC,UAAU,QACVlH,KAAK,QACLmH,MAAM,OACL,IANL,SASA,kCACE,cAAC,IAAD,CACEF,KAAK,OACLC,UAAU,QACVlH,KAAK,QACLmH,MAAM,OACL,IANL,SASA,kCACE,cAAC,IAAD,CACEF,KAAK,OACLC,UAAU,QACVlH,KAAK,QACLmH,MAAM,OACL,IANL,YAUE,wBAAQnH,KAAK,SAAb,2BClEVoH,GAAa9B,IAAOC,OAAV,uXAEN,SAAAC,GAAK,OAAIA,EAAMjD,KAAOiD,EAAMjD,KAAO,QACpC,SAAAiD,GAAK,OAAIA,EAAMjD,KAAOiD,EAAMjD,KAAO,QAgBtC8E,GAAc/B,IAAOgC,IAAV,uEAEP,SAAA9B,GAAK,OAAIA,EAAMjD,KAAOiD,EAAMjD,KAAO,QACpC,SAAAiD,GAAK,OAAIA,EAAMjD,KAAOiD,EAAMjD,KAAO,QAoB3BgF,GAbJ,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,SAAUtB,EAA4B,EAA5BA,QAASlE,EAAmB,EAAnBA,OACjC,EAAwB8D,mBAAS,IAAjC,mBAAOvD,EAAP,KAAakF,EAAb,KAME,OALFxB,qBAAU,WACR,IAAMyB,EAAO,UAAM,IAAInH,KAAKC,KAAK4B,OAAOJ,IAA3B,KACbyF,EAAQC,KACR,CAAC1F,IAGc,IAAbwF,EAAiB,cAACJ,GAAD,CAAY7E,KAAMA,EAAM2D,QAASA,EAAjC,SACdsB,IACa,cAACH,GAAD,CAAa9E,KAAMA,K,SC1BnCoF,I,MAA0B,SAAC,GAEjC,IAFgF,IAA7ClH,EAA4C,EAA5CA,OAAS2D,EAAmC,EAAnCA,WAAYmC,EAAuB,EAAvBA,KAChDM,EAAS,GACTnG,EAAI,EAAGA,EAAID,EAAQC,IACvBmG,EAAOlG,KAAK,CAAC4F,EAAK7F,GAAG0D,EAAW1D,KAG5B,OACI,cAACkH,GAAA,EAAMC,KAAP,UACKhB,EAAOzF,KAAI,SAACoD,EAAI9D,GAAL,OAAW,eAACkH,GAAA,EAAME,IAAP,WACnB,cAACF,GAAA,EAAML,KAAP,UAAa/C,EAAG,KAAgB,cAACoD,GAAA,EAAML,KAAP,oBAAgB/C,EAAG,GAAG,GAAtB,YAA4BA,EAAG,GAAG,GAAlC,YAAwCA,EAAG,GAAG,QAD3C9D,UAkDxCqH,GAJa/C,YACxBgD,aARoB,SAAC7H,GAAD,MAA0B,CAC9CiE,WAAYjE,EAAM6D,MAAMI,WACxBmC,KAAMpG,EAAMyE,OAAOhF,UACnBuE,UAAWhE,EAAM6D,MAAMG,UACvBrD,OAAQX,EAAM6D,MAAMlD,UAIpBkH,EAvCoD,SAAC,GAAyD,IAAxD5D,EAAuD,EAAvDA,WAAYmC,EAA2C,EAA3CA,KAAMpC,EAAqC,EAArCA,UAAWrD,EAA0B,EAA1BA,OAE7EmH,EAAWC,cACrB,EAAkCpC,mBAAS,GAA3C,mBAAOqC,EAAP,KAAkBC,EAAlB,KAMI,OALJnC,qBAAU,WACNmC,EAAahE,EAAW3D,OAAS8F,EAAK9F,OAAS8F,EAAK9F,OAAS2D,EAAW3D,UAC1E,CAAC8F,EAAK9F,OAAQ2D,EAAW3D,SAGhB,eAACmH,GAAA,EAAD,CAAOS,UAAQ,EAACC,QAAM,EAACC,OAAK,EAA5B,UACH,cAACX,GAAA,EAAMY,OAAP,UACI,eAACZ,GAAA,EAAME,IAAP,WACI,cAACF,GAAA,EAAMa,WAAP,CACAjF,OAAqB,SAAX1C,EAAoBqD,OAAYV,EAC1CyC,QAAS,kBAAM+B,EAAS,CAACjI,KAAM,cAAeC,QAAS,UAFvD,kBAMA,cAAC2H,GAAA,EAAMa,WAAP,CACAjF,OAAoB,SAAX1C,EAAoBqD,OAAYV,EACzCyC,QAAS,kBAAM+B,EAAS,CAACjI,KAAM,cAAeC,QAAS,UAFvD,uBAQFmE,EAAW3D,OAAS,EAAK,cAAC,GAAD,CAAW2D,WAAYA,EAAY3D,OAAQ0H,EAAW5B,KAAMA,IAAU,Y,oBCF9FmC,GAJQ1D,YACnBgD,aANoB,SAAC7H,GAAD,MAA6C,CAEjE6D,MAAO7D,EAAM6D,MAAMA,SAIM,CAAE2E,SNKP,SAAC3E,GAAD,MACpB,CACIhE,KAAM6D,EAAW5D,QAAS,CAAE+D,WMPK4E,cNUR,SAACxE,GAAD,MACzB,CACIpE,KAAM+D,EAAiB9D,QAAS,CAAEmE,iBMZ1C4D,EAzC0B,SAAC,GAAuE,IAAtEhE,EAAqE,EAArEA,MAAOnE,EAA8D,EAA9DA,UAAW8I,EAAmD,EAAnDA,SAAU7I,EAAyC,EAAzCA,QAAS8I,EAAgC,EAAhCA,cAE1DnJ,EAAeuE,EAAfvE,EAAGwE,EAAYD,EAAZC,IAAKC,EAAOF,EAAPE,IACf,EAAwB4B,mBAAS,GAAjC,mBAAO+C,EAAP,KAAaC,EAAb,KAwBA,OAtBA7C,qBAAU,WACN,GAAGpG,EAAU,CACb,IAAMkJ,EAAYC,YAAW,WACzBF,EAAU,KAAFrJ,EAAa,GAAJwE,EAAQC,EAAK,KAC/B,KAEJ,OAAO,WAAQ+E,aAAaF,OAE7B,CAACjJ,EAASD,EAAWJ,EAAGwE,EAAKC,IAE/B+B,qBAAU,WACHpG,IACKC,EAEMA,GAAoB,IAAT+I,IACrBD,EAAc,CAACrI,KAAK6C,MAAMyF,EAAO,MAAMtI,KAAK6C,MAAMyF,EAAO,KAAO,IAAItI,KAAK6C,MAAMyF,EAAO,KAAO,MAC7FC,EAAQ,GACRH,EAAS,CAAClJ,EAAE,EAAGwE,IAAK,EAAGC,IAAI,KAJ3ByE,EAAS,CAAClJ,EAAGc,KAAK6C,MAAMyF,EAAO,MAAM5E,IAAK1D,KAAK6C,MAAMyF,EAAO,KAAO,IAAI3E,IAAK3D,KAAK6C,MAAMyF,EAAO,KAAO,SAO3G,CAACA,EAAMhJ,EAAWJ,EAAGwE,EAAKC,EAAKpE,EAAS8I,EAAeD,IAElD,qBAAK7B,UAAWC,KAAOmC,UAAvB,SACH,sBAAKpC,UAAWC,KAAO8B,KAAvB,UAA8BpJ,GAAK,GAAL,UAAaA,GAAb,WAAuBA,GAArD,IAA2DwE,GAAO,GAAP,UAAeA,GAAf,WAA2BA,GAAtF,IAA8FC,GAAO,GAAP,UAAeA,GAAf,WAA2BA,GAAzH,aC0GFiF,GAAenE,YACnBoE,IACApB,aAZsB,SAAC7H,GAAD,MAA6C,CACnEZ,IAAKY,EAAMyE,OAAOrF,IAClBC,SAAUW,EAAMyE,OAAOpF,SACvBG,MAAOQ,EAAMyE,OAAOjF,MACpBC,UAAWO,EAAMyE,OAAOhF,UACxBC,UAAWM,EAAMyE,OAAO/E,UACxBC,QAASK,EAAMyE,OAAO9E,QACtBsE,WAAYjE,EAAM6D,MAAMI,cAKC,CAAEsB,QTjFF,SAACnG,GAAD,MACnB,CAACS,KAAMhB,EAAUiB,QAAS,CAACV,SSgFGQ,cAAa4F,STzEvB,SAAChG,GAAD,MACpB,CAACK,KAAMd,EAAWe,QAAS,CAACN,WSwEyBkG,aThE7B,SAACjG,GAAD,MACxB,CAACI,KAAMb,EAAgBc,QAAS,CAACL,eS+DkCyJ,aTpE3C,SAACxJ,GAAD,MACxB,CAACG,KAAMZ,EAAgBa,QAAS,CAACJ,eSmEgD+F,UT3D5D,SAAC9F,GAAD,MACrB,CAACE,KAAMX,EAAaY,QAAS,CAACH,eSwDjBkF,EAvHE,SAAC,GAIJ,IAHlBzF,EAGiB,EAHjBA,IAAKC,EAGY,EAHZA,SAAUG,EAGE,EAHFA,MAAOC,EAGL,EAHKA,UAAW8F,EAGhB,EAHgBA,QAASC,EAGzB,EAHyBA,SACzCE,EAEgB,EAFhBA,aAAc9F,EAEE,EAFFA,YAAaF,EAEX,EAFWA,UAAWwJ,EAEtB,EAFsBA,aACtCzD,EACgB,EADhBA,UAAW9F,EACK,EADLA,QAGd,GAFmB,EADIsE,WAGO0B,oBAAS,IAAvC,mBAAOkB,EAAP,KAAgBX,EAAhB,KACA,EAA4BP,qBAA5B,mBAAO9D,EAAP,KAAesH,EAAf,KACA,EAAgCxD,oBAAS,GAAzC,mBAAOyD,EAAP,KAAiBC,EAAjB,KACA,EAA0C1D,oBAAS,GAAnD,mBAAO2D,EAAP,KAAsBC,EAAtB,KACA,EAA8B5D,qBAA9B,mBAAO6D,EAAP,KAAgBvD,EAAhB,KAEEH,qBAAU,YACe,IAArBrG,EAAUa,QAAc6I,EAAU,GAAD,OAAI1J,EAAUA,EAAUa,OAAO,KAClD,IAAflB,EAAIkB,QAAgBuB,GAAO0D,EAAQ3D,EAAeC,IACnC,IAAfzC,EAAIkB,URiFa,SAAClB,GACrB,IAAMqK,EAAU,YAAOrK,GAEjBsK,EAAUvG,EAAO/D,GAIvB,OAFAsK,EAAQlJ,KAAKkJ,EAAQC,SAEdF,EAAWG,OAAM,SAACvF,EAAI9D,GAAL,OAAW8D,IAAOqF,EAAQnJ,MQvF/BsJ,CAAOzK,GACbqG,GAAU,GAAQvF,EAAad,EAAKQ,IAE9CD,GAASsG,EAAW,KACvB,CAAC7G,EAAKQ,EAAaiC,EAAQpC,EAAWE,EAAS4F,EAASE,IAE1DK,qBAAU,WAEK,YAAVtG,GACD6J,GAAY,GACXE,GAAiB,IACE,UAAV/J,IACR6J,GAAY,GACZpD,EAAW,MAGf,CAACmD,EAAU5J,IAMb,IAAMsK,EAAoD,SAACC,GAEzC,YAAVvK,IACEH,EAASE,EAAEkB,SAASwB,OAAO8H,EAAEC,cAAcC,YAC7C1E,EAAQnE,EAAUhC,EAAK6C,OAAO8H,EAAEC,cAAcC,WAAY5K,EAASE,IAC1DF,EAASC,EAAEmB,SAASwB,OAAO8H,EAAEC,cAAcC,aACpD1E,EAAQnE,EAAUhC,EAAK6C,OAAO8H,EAAEC,cAAcC,WAAY5K,EAASC,MAkBzE,OAZAwG,qBAAU,WACLsD,GACDG,GAAiB,GAElBD,QACchG,IAAZkG,IAAuBA,EAAU,EAAIX,YAAW,kBAAM5C,EAAWuD,EAAU,KAAI,KAAQH,GAAY,IAEvF,IAAZG,GAAeN,GAAa,KAE9B,CAACM,EAASF,EAAeJ,EAAcE,IAIxC,sBAAKzC,UAAWC,IAAOsD,IAAvB,UACE,gCACA,wBAAQvD,UAAWC,IAAOuD,OAA1B,SACE,+CAEF,sBAAKxD,UAAWC,IAAOwD,QAAvB,UACGzK,EAAU,qBAAKgH,UAAWC,IAAOjH,QAAvB,qBAAiD,KAC/C,IAAZ6J,EAAgB,cAAC,GAAD,CAAO9J,UAAWA,EAAWC,QAASA,IAAc,KACrE,sBAAKgH,UAAWC,IAAOyD,KAAvB,cAA+BjB,EAC7BhK,EAAI6B,KAAI,SAACqJ,EAAM7H,GAAP,OAAiB,cAAC,GAAD,CAAMsD,QAAS+D,EAAyBjI,OAAQA,EAAhD,SAAyDyI,GAAxB7H,MACxD,qBAAKkE,UAAWC,IAAO4C,QAAvB,SAAkCA,OAEtC,cAAC,EAAD,CAAO9D,aAAcA,EAAcH,QAASA,EAAS/F,MAAOA,EAAOqC,OAAQA,EAAQ2D,SAAUA,EAAU5D,eAAgBA,EAAgB6D,UAAWA,IAClJ,sBAAKkB,UAAWC,IAAO2D,YAAvB,UACE,wBAAQxE,QAAS,kBAAgBG,GAAVW,IAAvB,SAAuE,0CACtEA,EAAU,cAAC,EAAD,CAASZ,WAAYA,EAAYC,WAAYA,EAAaS,UAAWC,IAAOC,QACnEtB,QAASA,EAAS3D,eAAgBA,EAAgB4D,SAAUA,EAAUE,aAAcA,EACpFD,UAAWA,IACnB,cAIhB,cAAC,GAAD,CAAqBkB,UAAWC,IAAO4D,mBA8C9BC,GARK,WAClB,OAAO,cAAC,IAAD,UACL,cAAC,IAAD,CAAU3F,MAAOA,EAAjB,SACE,cAACkE,GAAD,SCjJS0B,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAAS9E,OACP,cAAC,IAAM+E,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.80892f7f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3c1f6\",\"header\":\"App_header__B3P0W\",\"wrapper\":\"App_wrapper__2WyDl\",\"success\":\"App_success__3IY-M\",\"game\":\"App_game__Zi2wF\",\"counter\":\"App_counter__3HWmC\",\"optionsWrap\":\"App_optionsWrap__11SWN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"timerWrap\":\"Timer_timerWrap__We04d\",\"time\":\"Timer_time__3AjSV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"options\":\"Options_options__f5xYX\"};","const SET_GRID = 'SET-GRID';\r\nconst SET_MOVEMENT = 'SET-MOVEMENT';\r\nconst SET_START = 'SET_START';\r\nconst SET_PRESET_ARR = 'SET-PRESET-ARR';\r\nconst SET_START_GAME = 'SET-START-GAME';\r\nconst SET_SUCCESS = 'SET-SUCCESS';\r\n\r\nexport type SetMovementType = {\r\n    h: Array<number>\r\n    v: Array<number>\r\n}\r\ntype InitialState = {\r\n    arr: Array<number>\r\n    movement: SetMovementType\r\n    start: 'Disabled' | 'Start' | 'Restart'\r\n    presetArr: Array<string>\r\n    startGame: boolean\r\n    success: boolean\r\n}\r\n let initialState: InitialState = {\r\n     arr: [],\r\n     movement: {\r\n         h: [],\r\n         v: []\r\n     },\r\n     start: 'Disabled',\r\n     presetArr: [],\r\n     startGame: false,\r\n     success: false\r\n    }\r\n\r\n\r\ntype ActionTypes = ReturnType<typeof setGrid> | ReturnType<typeof setMovement> | ReturnType<typeof setStart> | ReturnType<typeof setPresetArr> | ReturnType<typeof setStartGame> | ReturnType<typeof setIsDone>\r\n\r\n    const appReducer = (state = initialState, action: ActionTypes): InitialState => {\r\n        switch(action.type){\r\n            case SET_GRID:\r\n                return {\r\n                    ...state,\r\n                    ...action.payload\r\n                }\r\n            case SET_MOVEMENT:\r\n                return {\r\n                    ...state,\r\n                    ...action.payload\r\n                }\r\n            case SET_START:\r\n                return {\r\n                    ...state,\r\n                    ...action.payload\r\n                }\r\n            case SET_PRESET_ARR:\r\n                return {\r\n                    ...state,\r\n                    presetArr: [...state.presetArr, ...action.payload.presetArr]\r\n                }\r\n            case SET_START_GAME:\r\n                return {\r\n                    ...state,\r\n                    ...action.payload\r\n                }\r\n            case SET_SUCCESS:\r\n                return {\r\n                    ...state,\r\n                    ...action.payload\r\n                }\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\n    export const setGrid = (arr: Array<number>) => (\r\n        {type: SET_GRID, payload: {arr}} as const\r\n        )\r\n\r\n    export const setMovement = (movement: SetMovementType)=> (\r\n        {type: SET_MOVEMENT, payload: {movement}\r\n    } as const)\r\n\r\n    export const setStart = (start: 'Disabled' | 'Start' | 'Restart') => (\r\n        {type: SET_START, payload: {start}\r\n    } as const)\r\n\r\n\r\n    export const setStartGame = (startGame: boolean) => (\r\n        {type: SET_START_GAME, payload: {startGame}} as const\r\n    )\r\n\r\n    export const setPresetArr = (presetArr: Array<string>) => (\r\n        {type: SET_PRESET_ARR, payload: {presetArr}\r\n    } as const)\r\n\r\n\r\n    export const setIsDone = (success: boolean) => (\r\n        {type: SET_SUCCESS, payload: {success}\r\n    } as const)\r\n    export default appReducer","import { setMovement } from \"../redux/app-reducer\";\r\n\r\ninterface IParam {\r\n  (arg0: {h: Array<number>, v: Array<number>}): void;\r\n}\r\n\r\nexport const possibleMove = (arr: Array<number>, setMovement: IParam): void => {\r\n  const multiplicity = Math.sqrt(arr.length)\r\n  let length = multiplicity;\r\n  let v: Array<number> = [], h: Array<number> = []\r\n  for (let i = 0; i < length; i++) {\r\n    h.push(arr[i]);\r\n    if (h.includes(0) && h.length % multiplicity === 0) {\r\n      if (h.length > multiplicity) h.splice(0, h.length - multiplicity)\r\n      break;\r\n    } else if (h.length % multiplicity === 0) {\r\n      length += multiplicity;\r\n    }\r\n  }\r\n  let column = arr.indexOf(0)\r\n  while (column > multiplicity - 1) {\r\n    column -= multiplicity\r\n  }\r\n  for (let j = column; j < arr.length;) {\r\n    v.push(arr[j])\r\n    j += multiplicity\r\n  }\r\n  setMovement({ h, v })\r\n}\r\n\r\nconst swap = (arr: Array<number>, index1: number, index2: number): Array<number> => arr.map((val, idx, arr) => {\r\n  if (idx === index1) return arr[index2];\r\n  if (idx === index2) return arr[index1];\r\n  return val;\r\n});\r\n\r\nexport const MoveAside = (arr: Array<number>, from: number, displace: Array<number>): Array<number> => {\r\n  let couple: Array<number> = [];\r\n  let swappedArr = arr;\r\n  let swappedDisplace = [...displace]\r\n\r\n  if (swappedDisplace.indexOf(from) < swappedDisplace.indexOf(0)) {\r\n    for (let i = displace.length - 1; i >= 0; i--) {\r\n      couple = [swappedDisplace[i], swappedDisplace[i - 1]]\r\n      if (couple[0] === 0) {\r\n        let swapFrom = swappedArr.indexOf(couple[0])\r\n        let swapTo = swappedArr.indexOf(couple[1])\r\n        swappedArr = swap(swappedArr, swapFrom, swapTo)\r\n        swappedDisplace = [...swap(swappedDisplace, swappedDisplace.indexOf(couple[0]), swappedDisplace.indexOf(couple[1]))]\r\n        possibleMove(swappedArr, setMovement)\r\n      }\r\n      if (couple[1] === from) break;\r\n    }\r\n  } else {\r\n    for (let i = 0; i < displace.length; i++) {\r\n      couple = [swappedDisplace[i], swappedDisplace[i + 1]]\r\n      if (couple[0] === 0) {\r\n        let swapFrom = swappedArr.indexOf(couple[0])\r\n        let swapTo = swappedArr.indexOf(couple[1])\r\n        swappedArr = swap(swappedArr, swapFrom, swapTo)\r\n        swappedDisplace = [...swap(swappedDisplace, swappedDisplace.indexOf(couple[0]), swappedDisplace.indexOf(couple[1]))]\r\n        possibleMove(swappedArr, setMovement)\r\n      }\r\n      if (couple[1] === from) break;\r\n    }\r\n  }\r\n\r\n  return swappedArr\r\n}\r\n\r\nexport const randomizedGrid = (preset: string) : Array<number> => {\r\n  const gridSet: Set<number> = new Set();\r\n  let rowLength = Math.sqrt(Number(preset));\r\n  let zeroRow = 1;\r\n  const nextRow = rowLength\r\n\r\n  while (gridSet.size < Number(preset)) {\r\n    gridSet.add(getRandomInt(Number(preset)))\r\n  }\r\n  let arrSet: Array<number> = [...gridSet]\r\n\r\n  if (nextRow % 2 === 0) {\r\n    while (arrSet.indexOf(0) >= rowLength) {\r\n      rowLength += nextRow\r\n      zeroRow += 1\r\n    }\r\n  } else {\r\n    zeroRow = 0\r\n  }\r\n\r\n  if ((isSolved(arrSet) + zeroRow) % 2 !== 0) {\r\n    let index: number = 0, index2: number = 0\r\n    for (let i = 0; i < arrSet.length; i++) {\r\n      if (arrSet[i] > arrSet[i + 1] && arrSet[i] !== 0 && arrSet[i + 1] !== 0) {\r\n        index = i;\r\n        index2 = i + 1;\r\n      }\r\n    }\r\n    arrSet = swap(arrSet, index, index2)\r\n  }\r\n  return arrSet\r\n}\r\n\r\nconst isSolved = (set: Array<number>) : number => {\r\n  let solved = set.reduce((accumulator, currentValue, index, array) => {\r\n    let result = 0\r\n    for (index; index < array.length; index++) {\r\n      if (currentValue > array[index + 1] && array[index + 1] !== 0 && currentValue !== 0) result += 1\r\n    }\r\n    return accumulator += result\r\n  }, 0)\r\n  return solved\r\n}\r\n\r\nconst getRandomInt = (max: number) => {\r\n  return Math.floor(Math.random() * max);\r\n}\r\n\r\nexport const sortBy = (arr: Array<number>, sorting?: string): number[] => {\r\n  let sorted = [...arr]\r\n  if (sorting === undefined) {\r\n    sorted.sort((a, b) => a - b)\r\n    return sorted\r\n  }\r\n  return sorted\r\n}\r\n\r\nexport const isDone = (arr: Array<number>) : boolean => {\r\n  const checkedArr = [...arr];\r\n\r\n  const arrDone = sortBy(arr)\r\n\r\n  arrDone.push(arrDone.shift()!)\r\n\r\n  return checkedArr.every((el, i) => el === arrDone[i])\r\n}\r\n\r\n","import { sortBy } from \"../Core/Core\";\r\n\r\nconst SET_TIMER = 'SET-TIMER';\r\nconst CHANGE_SORT = 'CHANGE-SORT';\r\nconst SET_RESULT_TIME = 'SET-RESULT-TIME';\r\n\r\ntype InitialState = {\r\n    timer: {h: number, min: number, sec: number}\r\n    column: string\r\n    direction: \"ascending\" | \"descending\" | undefined\r\n    resultTime: Array<Array<number>>\r\n}\r\n\r\nlet initialState: InitialState = {\r\n    timer: {\r\n        h: 0,\r\n        min: 0,\r\n        sec: 0\r\n    },\r\n    column: '',\r\n    direction: undefined,\r\n    resultTime: []\r\n}\r\n\r\ntype ActionTypes = ReturnType<typeof setTimer> | ReturnType<typeof setResultTime> | ReturnType<typeof changeSort>\r\n\r\nconst timerReducer = (state = initialState, action: ActionTypes): InitialState => {\r\n    switch (action.type) {\r\n        case SET_TIMER:\r\n            return {\r\n                ...state,\r\n               ...action.payload\r\n\r\n            }\r\n        case SET_RESULT_TIME:\r\n            return {\r\n                ...state,\r\n                resultTime: [...state.resultTime, ...[action.payload.resultTime]]\r\n            }\r\n        case CHANGE_SORT:\r\n\r\n            if (state.column === action.payload) {\r\n                return {\r\n                    ...state,\r\n                    resultTime: state.resultTime.slice().reverse(),\r\n                    direction:\r\n                        state.direction === 'ascending' ? 'descending' : 'ascending',\r\n                }\r\n            }\r\n\r\n             return {\r\n                 ...state,\r\n                column: action.payload,\r\n                resultTime: [sortBy(state.resultTime.map(el => Number(el.join())))],\r\n                direction: 'ascending',\r\n            } \r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTimer = (timer: {h: number, min: number, sec: number}) => (\r\n    {\r\n        type: SET_TIMER, payload: { timer }\r\n    } as const )\r\n\r\n    export const setResultTime = (resultTime: Array<number>) => (\r\n        {\r\n            type: SET_RESULT_TIME, payload: { resultTime }\r\n        } as const )\r\n\r\nexport const changeSort = (column: string) => (\r\n    { type: CHANGE_SORT, payload: column } as const\r\n)\r\n\r\nexport default timerReducer","import { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\nimport appReducer from './app-reducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport timerReducer from './timer-reducer';\r\n\r\nlet RootReducer = combineReducers({\r\n    game15: appReducer,\r\n    timer: timerReducer\r\n});\r\n\r\ntype RootReducerType = typeof RootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(RootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\nexport default store;","import React, { FC, MouseEventHandler, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ButtonProps {\r\n  readonly start: 'Disabled' | 'Start' | 'Restart'\r\n  readonly disabled: boolean\r\n  readonly onClick: MouseEventHandler<HTMLButtonElement>\r\n}\r\n\r\nconst StyledButton = styled.button<ButtonProps>`\r\n  color: white;\r\n  display: flex;\r\n  align-self:center;\r\n  justify-content: center;\r\n  background-color: ${props => props.start === 'Start' ? \"red\" : props.start === 'Restart' ? \"green\" : \"grey\"};\r\n  height: 25%;\r\n  min-width: 35%;\r\n  border: blue 5px solid;\r\n  padding-bottom: 3px;\r\n`;\r\n\r\ntype StartProps = {\r\n  setGrid:(arg0: Array<number>) => void\r\n  start: 'Disabled' | 'Start' | 'Restart'\r\n  preset: string | undefined\r\n  setStart: (arg0: 'Disabled' | 'Start' | 'Restart') => void\r\n  randomizedGrid: (arg0: string) => Array<number>\r\n  setIsDone: (arg0: boolean) => void\r\n  setPresetArr: (arg0: Array<string>) => void\r\n}\r\n\r\nconst Start: FC<StartProps & {className?: string}>= ({setGrid, start, preset, setStart, randomizedGrid, setIsDone, setPresetArr}) => {\r\n\r\n    const [disabled, setDisabled] = useState(false)\r\n\r\n\r\n\r\n    useEffect(()=> {\r\n      preset ? setDisabled(false) : setDisabled(true)\r\n      \r\n     \r\n    }, [disabled, preset])\r\n\r\n  const handleclick = () => {\r\n    if(start === 'Start')setStart('Restart')\r\n    if(start === 'Restart'){\r\n      setStart('Start')\r\n      setIsDone(false)\r\n     if(preset){\r\n       setGrid(randomizedGrid(preset))\r\n       setPresetArr([preset])\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n    return (\r\n       <StyledButton disabled={disabled} onClick={handleclick} start={start}>\r\n       {start} \r\n    </StyledButton>\r\n  \r\n    )}\r\n\r\n\r\nexport default Start;","import styles from './Options.module.scss'\r\nimport { Field, Form } from 'react-final-form';\r\nimport { Dispatch, FC, SetStateAction } from 'react';\r\n\r\ntype OptionProps = {\r\n  setPresetArr: (arg: Array<string>)=> void\r\n  setCounter: Dispatch<SetStateAction<number | undefined>>\r\n  setStart: (arg0: \"Start\" | \"Disabled\" | \"Restart\") => void\r\n  setOptions: (arg1: boolean) => void\r\n  randomizedGrid: (arg1: string) => Array<number>\r\n  setGrid: (arg1: Array<number>) => void\r\n  setIsDone: (arg1: boolean) => void\r\n}\r\n\r\ninterface GridType {grid: string}\r\n\r\nconst Options: FC<OptionProps & {className: string}> = ({setPresetArr, setCounter, setStart, setOptions, randomizedGrid, setGrid, setIsDone}): JSX.Element => {\r\n\r\n    const onSubmit = ({grid}: GridType) => {\r\n      setOptions(false)\r\n      if(grid)setStart('Start')\r\n      setGrid(randomizedGrid(grid))\r\n      setIsDone(false)\r\n      setPresetArr([grid])\r\n      setCounter(5)\r\n    }\r\n\r\n    return (\r\n        <Form \r\n        onSubmit={onSubmit}\r\n        render={({ handleSubmit, form, submitting, pristine, values }) => {\r\n            return <form  className={styles.options} onSubmit={handleSubmit} >\r\n                    <div>       \r\n             <label>Choose the Grid</label>\r\n             </div>\r\n            <div>\r\n            <label>\r\n                <Field\r\n                  name=\"grid\"\r\n                  component=\"input\"\r\n                  type=\"radio\"\r\n                  value=\"9\"\r\n                />{' '}\r\n                3*3\r\n              </label>\r\n              <label>\r\n                <Field\r\n                  name=\"grid\"\r\n                  component=\"input\"\r\n                  type=\"radio\"\r\n                  value=\"16\"\r\n                />{' '}\r\n                4*4\r\n              </label>\r\n              <label>\r\n                <Field\r\n                  name=\"grid\"\r\n                  component=\"input\"\r\n                  type=\"radio\"\r\n                  value=\"25\"\r\n                />{' '}\r\n                5*5\r\n              </label>\r\n              <label>\r\n                <Field\r\n                  name=\"grid\"\r\n                  component=\"input\"\r\n                  type=\"radio\"\r\n                  value=\"36\"\r\n                />{' '}\r\n                6*6\r\n              </label>\r\n          </div>\r\n                <button type='submit'>Set Up</button>\r\n            </form>\r\n        }} \r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport default Options","import React, { MouseEventHandler, useEffect, useState } from 'react';\r\nimport { ReactNode } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface CellProps {\r\n  readonly size: string\r\n}\r\nconst StyledCell = styled.button<CellProps>`\r\ndisplay: flex;\r\nheight: ${props => props.size ? props.size : null};\r\nwidth: ${props => props.size ? props.size : null};\r\ncolor:cadetblue;\r\nborder: 2px solid rgb(95, 6, 6);\r\nborder-radius: 15%;\r\nalign-items: center;\r\njustify-content: center;\r\nfont-size: 4rem;\r\n&:hover {\r\n  background-color: rgb(215, 215, 226);\r\n  color: red;\r\n  font-weight: bold;\r\n  text-shadow: black 0 0 2rem;\r\n  border: 2.5px solid rgb(179, 35, 35);\r\n}\r\n`;\r\n\r\nconst StyledEmpty = styled.div<CellProps>`\r\ndisplay: flex;\r\nheight: ${props => props.size ? props.size : null};\r\nwidth: ${props => props.size ? props.size : null};\r\n`;\r\n\r\ntype Type = {children: ReactNode\r\n   onClick: MouseEventHandler<HTMLButtonElement>\r\n   preset: string | undefined\r\n  }\r\nconst Cell = ({ children, onClick, preset }: Type) => {\r\n  const [size, setSize] = useState('')\r\n  useEffect(() => {\r\n    const newSize = `${100/Math.sqrt(Number(preset))}%`\r\n    setSize(newSize)\r\n  },[preset])\r\n\r\n    return (\r\n      children !== 0 ? <StyledCell size={size} onClick={onClick}>\r\n        {children}\r\n      </StyledCell> : <StyledEmpty size={size}/>)\r\n  }\r\n\r\n  export default Cell;\r\n","import React, { FC, MouseEventHandler, useEffect, useState } from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { Table } from 'semantic-ui-react';\r\nimport { AppStateType } from '../../redux/redux-reducers';\r\nimport './TimerTable.module.scss';\r\n\r\ntype TableType = {\r\n    resultTime: Array<Array<number>>\r\n    grid: Array<string>\r\n    direction: \"ascending\" | \"descending\" | undefined\r\n    column: string | undefined\r\n}\r\n\r\ntype RowsType = {\r\n    length: number\r\n    resultTime: Array<Array<number>>\r\n    grid: Array<string>\r\n}\r\n\r\nconst TableRows: FC<RowsType> = ({ length,  resultTime, grid}): JSX.Element => {\r\n    let values = []\r\nfor(let i = 0; i < length; i++){\r\n    values.push([grid[i],resultTime[i]])\r\n\r\n}\r\n        return (\r\n            <Table.Body>\r\n                {values.map((el, i) => <Table.Row key={i}>\r\n                    <Table.Cell>{el[0]}</Table.Cell><Table.Cell>{`${el[1][0]}.${el[1][1]}.${el[1][2]}`}</Table.Cell>\r\n                </Table.Row>)}\r\n        </Table.Body>\r\n           )\r\n    }\r\n\r\n\r\nconst TimerTable: FC<TableType & {className: string}> = ({resultTime, grid, direction, column }): JSX.Element => {\r\n\r\n    const dispatch = useDispatch()\r\nconst [lengthArr, setLengthArr] = useState(0)\r\nuseEffect(()=> {\r\n    setLengthArr(resultTime.length > grid.length ? grid.length : resultTime.length)\r\n},[grid.length, resultTime.length])\r\n\r\n\r\n    return <Table sortable celled fixed>\r\n        <Table.Header>\r\n            <Table.Row>\r\n                <Table.HeaderCell \r\n                sorted ={ column === 'grid' ? direction : undefined}\r\n                onClick={() => dispatch({type: 'CHANGE-SORT', payload: 'grid'})}\r\n                >\r\n                    Grid\r\n                    </Table.HeaderCell>\r\n                <Table.HeaderCell\r\n                sorted={ column === 'time' ? direction : undefined}\r\n                onClick={() => dispatch({type: 'CHANGE-SORT', payload: 'time'})}\r\n                >\r\n                    Time\r\n                    </Table.HeaderCell>\r\n            </Table.Row>\r\n        </Table.Header>\r\n            { resultTime.length > 0 ?  <TableRows resultTime={resultTime} length={lengthArr} grid={grid}/> : null\r\n        }\r\n    </Table>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    resultTime: state.timer.resultTime,\r\n    grid: state.game15.presetArr,\r\n    direction: state.timer.direction,\r\n    column: state.timer.column\r\n})\r\n\r\nconst TimerTableContainer = compose(\r\n    connect(mapStateToProps)(TimerTable)\r\n)\r\n\r\nexport default TimerTableContainer;","import React, { FC, useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-reducers';\r\nimport {setResultTime, setTimer } from '../../redux/timer-reducer';\r\nimport styles from './Timer.module.scss'\r\n\r\ntype TimerProps = {\r\n    timer: {h: number, min: number, sec: number}\r\n    startGame: boolean\r\n    setTimer: (arg0: {h: number, min: number, sec: number}) => void\r\n    success: boolean\r\n    setResultTime: (arg0: Array<number>) => void\r\n}\r\n\r\nconst Timer: FC<TimerProps> = ({timer, startGame, setTimer, success, setResultTime}): JSX.Element => {\r\n\r\n    const {h, min, sec} = timer\r\n    const [time, setTime] = useState(0) \r\n    \r\n    useEffect(()=> {\r\n        if(startGame){\r\n        const gameTimer = setTimeout(() => {\r\n            setTime(h*3600 + min*60+ sec +1)\r\n        }, 1000)\r\n\r\n       return () => { clearTimeout(gameTimer) }\r\n    }\r\n    },[success, startGame, h, min, sec])\r\n\r\n    useEffect(() => {\r\n        if(startGame){\r\n            if(!success){\r\n            setTimer({h: Math.floor(time / 3600),min: Math.floor(time % 3600 / 60),sec: Math.floor(time % 3600 % 60)})\r\n            } else if(success && time !== 0){\r\n            setResultTime([Math.floor(time / 3600),Math.floor(time % 3600 / 60),Math.floor(time % 3600 % 60)])\r\n            setTime(0)\r\n            setTimer({h:0, min: 0, sec:0})\r\n            }\r\n        }       \r\n    },[time, startGame, h, min, sec, success, setResultTime, setTimer])\r\n\r\n    return <div className={styles.timerWrap}>\r\n        <div className={styles.time}>{h >= 10 ? `${h}` : `0${h}`}.{min >= 10 ? `${min}` : `0${min}`}.{sec >= 10 ? `${sec}` : `0${sec}`} </div>\r\n        </div>\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    timer: {h: number, min: number, sec: number}\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n\r\n    timer: state.timer.timer\r\n})\r\n\r\nconst TimerContainer = compose(\r\n    connect(mapStateToProps, { setTimer, setResultTime})(Timer)\r\n)\r\n\r\nexport default TimerContainer;","import React, {FC, MouseEventHandler, useEffect, useState} from 'react';\nimport { connect, Provider } from 'react-redux';\nimport { BrowserRouter, withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport styles from './App.module.scss';\nimport { setGrid, setMovement, setStart, setPresetArr, setStartGame, setIsDone, SetMovementType} from './redux/app-reducer';\nimport store from './redux/redux-reducers';\nimport Start from './components/Start/Start';\nimport Options from './components/Options/Options';\nimport Cell from './components/Cell/Cell';\nimport { isDone, MoveAside, possibleMove, randomizedGrid } from './Core/Core';\nimport TimerTableContainer from './components/TimerTable/TimerTable';\nimport Timer from './components/Timer/Timer';\nimport { AppStateType } from './redux/redux-reducers';\n\ntype Props = {\n  arr: Array<number>\n  movement: SetMovementType\n  start: 'Disabled' | 'Start' | 'Restart'\n  presetArr: Array<string>\n  setGrid: (arg0: Array<number>) => void\n  setStart: (arg0: 'Disabled' | 'Start' | 'Restart') => void\n  setPresetArr: (arg0: Array<string>) => void\n  setMovement: (arg0: SetMovementType) => void\n  startGame: boolean\n  setStartGame: (arg0: boolean) => void \n  setIsDone: (arg0: boolean) => void\n  success: boolean\n  resultTime: Array<Array<number>>\n}\n\nconst App: FC<Props> = ({ \n  arr, movement, start, presetArr, setGrid, setStart,\n   setPresetArr, setMovement, startGame, setStartGame, \n   setIsDone, success, resultTime \n}): JSX.Element => {\n\nconst [options, setOptions] = useState(true)\nconst [preset, setPreset] = useState<string | undefined>()\nconst [showGrid, setShowGrid] = useState(false)\nconst [showTimerDown, setShowTimerDown] = useState(false)\nconst [counter, setCounter] = useState<number | undefined>();\n\n  useEffect(() => {\n   if(presetArr.length !== 0) setPreset(`${presetArr[presetArr.length-1]}`)\n  if(arr.length === 0 && preset)setGrid(randomizedGrid(preset))\n  if(arr.length !== 0){\n    const goodGame = isDone(arr)\n    goodGame ? setIsDone(true) : possibleMove(arr, setMovement)\n}\n  if(success) setCounter(5)\n},[arr, setMovement, preset, presetArr, success, setGrid, setIsDone])\n\nuseEffect(()=>{\n\n  if(start === 'Restart'){\n    setShowGrid(false)\n     setShowTimerDown(true)\n    } else if(start === 'Start'){\n      setShowGrid(false)\n      setCounter(5)\n\n    }\n},[showGrid, start])\n\ntype TargetType = {\n  target: HTMLElement\n}\n\nconst handleClick: MouseEventHandler<HTMLButtonElement> = (e)=>{\n  \n    if (start === 'Restart') {\n      if (movement.v.includes(Number(e.currentTarget.innerHTML))) {\n        setGrid(MoveAside(arr, Number(e.currentTarget.innerHTML), movement.v))\n      } else if (movement.h.includes(Number(e.currentTarget.innerHTML))) {\n        setGrid(MoveAside(arr, Number(e.currentTarget.innerHTML), movement.h))\n      }\n    }\n  }\n\n\n  useEffect(() => {\n    if(showGrid){\n      setShowTimerDown(false)\n      }\n  if(showTimerDown){\n    if(counter !== undefined) counter > 0 ? setTimeout(() => setCounter(counter - 1), 1000) : setShowGrid(true);\n    }\n    if(counter === 0) setStartGame(true)\n\n  }, [counter, showTimerDown, setStartGame, showGrid]);\n\n\n  return (\n    <div className={styles.app} >\n      <div>\n      <header className={styles.header} >\n        <div>Game of 15</div>\n      </header>\n      <div className={styles.wrapper} >\n        {success ? <div className={styles.success} >SUCCESS</div> : null}\n        {counter === 0 ? <Timer startGame={startGame} success={success} /> : null}\n        <div className={styles.game}> {showGrid ?\n          arr.map((cell, index) => <Cell onClick={handleClick} key={index} preset={preset}>{cell}</Cell>)\n          : <div className={styles.counter} >{counter}</div>\n        }</div>\n        <Start setPresetArr={setPresetArr} setGrid={setGrid} start={start} preset={preset} setStart={setStart} randomizedGrid={randomizedGrid} setIsDone={setIsDone} />\n        <div className={styles.optionsWrap}>\n          <button onClick={() => options ? setOptions(false) : setOptions(true)}><p>Options</p></button>\n          {options ? <Options setCounter={setCounter} setOptions={setOptions}  className={styles.options}\n                              setGrid={setGrid} randomizedGrid={randomizedGrid} setStart={setStart} setPresetArr={setPresetArr} \n                              setIsDone={setIsDone} /> \n                    : null}\n        </div>\n      </div>\n      </div>\n      <TimerTableContainer className={styles.timerTable} />\n    </div>\n  );\n}\n\ntype MapStatePropsType = {\n  arr: Array<number>,\n  movement: SetMovementType,\n  start: string,\n  presetArr: Array<string>,\n  startGame: boolean,\n  success: boolean,\n  resultTime: Array<Array<number>>\n}\n\ntype MapDispatchType = {\n  setGrid: () => void\n  setMovement: ()=> void\n  setStart: () => void\n  setPresetArr: () => void\n  setStartGame: () => void\n  setIsDone: () => void\n}\n\nconst mapStateToProps = (state: AppStateType ):MapStatePropsType => ({\n  arr: state.game15.arr,\n  movement: state.game15.movement,\n  start: state.game15.start,\n  presetArr: state.game15.presetArr,\n  startGame: state.game15.startGame,\n  success: state.game15.success,\n  resultTime: state.timer.resultTime\n})\n\nconst AppContainer = compose<React.ComponentType>(\n  withRouter,\n  connect(mapStateToProps, { setGrid, setMovement, setStart, setPresetArr, setStartGame, setIsDone}))(App)\n\nconst GameOf15App = () => {\n  return <BrowserRouter>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </BrowserRouter>\n}\n\nexport default GameOf15App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GameOf15App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameOf15App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}